addx -1
addx 3
addx 1
noop
noop
noop
addx -9
addx 18
addx 1
addx 2
noop
noop
addx 9
noop
noop
noop
addx -1
addx 2
addx -37
addx 1
addx 3
noop
addx 15
addx -21
addx 22
addx -6
addx 1
noop
addx 2
addx 1
noop
addx -10
noop
noop
addx 20
addx 1
addx 2
addx 2
addx -6
addx -11
noop
noop
noop")
input <- readLines("addx 15
addx -11
addx 6
addx -3
addx 5
addx -1
addx -8
addx 13
addx 4
noop
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx -35
addx 1
addx 24
addx -19
addx 1
addx 16
addx -11
noop
noop
addx 21
addx -15
noop
noop
addx -3
addx 9
addx 1
addx -3
addx 8
addx 1
addx 5
noop
noop
noop
noop
noop
addx -36
noop
addx 1
addx 7
noop
noop
noop
addx 2
addx 6
noop
noop
noop
noop
noop
addx 1
noop
noop
addx 7
addx 1
noop
addx -13
addx 13
addx 7
noop
addx 1
addx -33
noop
noop
noop
addx 2
noop
noop
noop
addx 8
noop
addx -1
addx 2
addx 1
noop
addx 17
addx -9
addx 1
addx 1
addx -3
addx 11
noop
noop
addx 1
noop
addx 1
noop
noop
addx -13
addx -19
addx 1
addx 3
addx 26
addx -30
addx 12
addx -1
addx 3
addx 1
noop
noop
noop
addx -9
addx 18
addx 1
addx 2
noop
noop
addx 9
noop
noop
noop
addx -1
addx 2
addx -37
addx 1
addx 3
noop
addx 15
addx -21
addx 22
addx -6
addx 1
noop
addx 2
addx 1
noop
addx -10
noop
noop
addx 20
addx 1
addx 2
addx 2
addx -6
addx -11
noop
noop
noop")
setwd("/Users/tea/coding/advent-of-code/2022")
##### 10 #####
input <- readLines("Untitled.txt")
### part 1
input <- strsplit(input, " ")
##### 10 #####
input <- readLines("input/Untitled.txt")
##### 10 #####
input <- readLines("input/Untitled.txt")
### part 1
input <- strsplit(input, " ")
x <- 1
cycle <- 0
strenght <- list()
for (i in c(20)) {
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == i) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == i) break
cycle <- cycle + 1
if (cycle == i) break
x <- x + as.numeric(element[2])
}
}
strenght[[paste0("C", i)]] <- i * x
}
Reduce(`+`, strenght)
x <- 1
cycle <- 0
strenght <- list()
for (i in c(20, 60)) {
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == i) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == i) break
cycle <- cycle + 1
if (cycle == i) break
x <- x + as.numeric(element[2])
}
}
strenght[[paste0("C", i)]] <- i * x
}
Reduce(`+`, strenght)
View(input)
View(input)
setwd("/Users/tea/coding/advent-of-code/2022")
##### 10 #####
input <- readLines("input/10-input.txt")
### part 1
input <- strsplit(input, " ")
x <- 1
cycle <- 0
strenght <- list()
for (i in c(20, 60, 100, 140, 180, 220)) {
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == i) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == i) break
cycle <- cycle + 1
if (cycle == i) break
x <- x + as.numeric(element[2])
}
}
strenght[[paste0("C", i)]] <- i * x
}
Reduce(`+`, strenght)
1+5+3-2+4+7+3
21*20
input[[1]][1]
input[[1]][2]
input[[1]][1]
input[[2]][2]
as.numeric(input[[2]][2])
### part 1
input <- strsplit(input, " ")
##### 10 #####
input <- readLines("input/10-input.txt")
### part 1
input <- strsplit(input, " ")
x <- 1
cycle <- 1
strenght <- list()
for (i in c(20, 60, 100, 140, 180, 220)) {
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == i) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == i) break
cycle <- cycle + 1
if (cycle == i) break
x <- x + as.numeric(element[2])
}
}
strenght[[paste0("C", i)]] <- i * x
}
Reduce(`+`, strenght)
##### 10 #####
input <- readLines("input/10-input.txt")
### part 1
input <- strsplit(input, " ")
strenght <- list()
for (i in c(20, 60, 100, 140, 180, 220)) {
x <- 1
cycle <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == i) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == i) break
cycle <- cycle + 1
if (cycle == i) break
x <- x + as.numeric(element[2])
}
}
strenght[[paste0("C", i)]] <- i * x
}
Reduce(`+`, strenght)
length(input)
letter <- c()
x <- 1
cycle <- 0
i <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == length(input)) break
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == length(input)) break
cycle <- cycle + 1
if (cycle == length(input)) break
x <- x + as.numeric(element[2])
}
if (x %in% c(i-1, i, i+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
i <- i + 1
if (i == 40) i <- 0
}
letter
matrix(letter, ncol = 40)
### part 2
letter <- c()
x <- 1
cycle <- 0
i <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if (cycle-1 %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if (cycle-1 %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if (cycle-1 %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
x <- x + as.numeric(element[2])
}
}
matrix(letter, ncol = 40)
cycle-1
cycle-1 %in% c(x-2, x-1, x)
if (cycle-1 %in% c(x-2, x-1, x))
(cycle-1 %in% c(x-2, x-1, x))
c(x-2, x-1, x)
cycle-1 %in% c(x-2, x-1, x)
1 %in% c(1,2)
### part 2
letter <- c()
x <- 1
cycle <- 0
i <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-2, x-1, x)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-2, x-1, x)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-2, x-1, x)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
x <- x + as.numeric(element[2])
}
}
matrix(letter, ncol = 40)
hej <- matrix(letter, ncol = 40)
View(hej)
paste(letter)
# Prepare the data
the_indices <- c(20, 60, 100, 140, 180, 220)
x <- readLines("input/10-input.txt") |>
strsplit(split=" ") |>
unlist() |>
(function(.) gsub("addx|noop", "0", .))() |>
as.numeric() |>
(function(.) c(1, .))() |>
cumsum()
# Part 1
sum(x[the_indices] * the_indices)
# Part 2
df <- data.frame(x=x[-241], col=rep(0:39, 6))
df$draw <- sapply(1:240, function(q){
as.numeric(df$col[q] %in% (df$x[q] + c(-1, 0, 1))) + 1
})
image_m <- matrix(c(".", "#")[df$draw], nrow=6, byrow=T)
for (i in 1:6) print(paste(image_m[i, ], collapse=""))
matrix(letter, ncol = 40)
matrix(letter, ncol = 40, byrow = FALSE)
### part 2
letter <- c()
x <- 1
cycle <- 0
i <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
cycle <- cycle + 1
if (cycle == 40) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
x <- x + as.numeric(element[2])
}
}
matrix(letter, ncol = 40, byrow = FALSE)
# Prepare the data
the_indices <- c(20, 60, 100, 140, 180, 220)
x <- readLines("input/10-input.txt") |>
strsplit(split=" ") |>
unlist() |>
(function(.) gsub("addx|noop", "0", .))() |>
as.numeric() |>
(function(.) c(1, .))() |>
cumsum()
# Part 1
sum(x[the_indices] * the_indices)
# Part 2
df <- data.frame(x=x[-241], col=rep(0:39, 6))
df$draw <- sapply(1:240, function(q){
as.numeric(df$col[q] %in% (df$x[q] + c(-1, 0, 1))) + 1
})
image_m <- matrix(c(".", "#")[df$draw], nrow=6, byrow=T)
for (i in 1:6) print(paste(image_m[i, ], collapse=""))
letter <- c()
x <- 1
cycle <- 0
for (element in input) {
if (element[1] == "noop") {
cycle <- cycle + 1
if (cycle == 41) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
}
if (element[1] == "addx") {
cycle <- cycle + 1
if (cycle == 41) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
cycle <- cycle + 1
if (cycle == 41) cycle <- 1
if ((cycle-1) %in% c(x-1, x, x+1)) {
letter <- c(letter, "#")
} else letter <- c(letter, ".")
x <- x + as.numeric(element[2])
}
}
matrix(letter, ncol = 40, byrow = FALSE)
matrix(letter, ncol = 40, byrow = TRUE)
final <- matrix(letter, ncol = 40, byrow = TRUE)
apply(final, 1, paste)
apply(final, 1, collapse)
for (i in 1:6) print(paste(final[i, ], collapse=""))
