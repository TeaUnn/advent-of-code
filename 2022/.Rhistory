}
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
(samples <- combn(9, 3))
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
tau_k <- lambda / (1 - lambda)
fun <- function(x, i) {
x^2 * (sum((1 + tau_k[samples[, i]] * x)^(-1))
/ prod(1 + tau_k * x))
}
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
tau_k <- lambda / (1 - lambda)
fun <- function(x, i) {
x^2 * (sum((1 + tau_k[samples[, i]] * x)^(-1))
/ prod(1 + tau_k * x))
}
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
lambda <- c(0.80, 0.55, 0.40, 0.30, 0.25, 0.25, 0.20, 0.15, 0.10)
(samples <- combn(9, 3))
tau_k <- lambda / (1 - lambda)
fun <- function(x, i) {
x^2 * (sum((1 + tau_k[samples[, i]] * x)^(-1))
/ prod(1 + tau_k * x))
}
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
p_s <- p_s / sum(p_s)
tau_k <- lambda / (1 - lambda)
fun <- function(x, i) {
x^2 * (sum((1 + tau_k[samples[, i]] * x)^(-1))
/ prod(1 + tau_k * x))
}
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
p_s
p_s <- p_s / sum(p_s)
sum(p_s)
p_s
p_s
p_s <- c()
for (i in 1:84) {
p_s[i] <- prod(tau_k[samples[, i]]) *
integrate(fun, 0, Inf, i)[[1]]
}
sum(p_s)
p_s
I_k
for (i in 1:9) {
for (j in 1:84) {
if (i %in% combn(x = 9, m = 3)[, j]) {
I_k[i, j] <- 1
} else I_k[i, j] <- 0
}
}
I_k
for (i in 1:9) {
for (j in 1:84) {
if (i %in% combn(x = 9, m = 3)[, j]) {
I_k[i, j] <- 1
} else I_k[i, j] <- 0
}
}
I_k <- matrix(NA, ncol = 84, nrow = 9)
for (i in 1:9) {
for (j in 1:84) {
if (i %in% combn(x = 9, m = 3)[, j]) {
I_k[i, j] <- 1
} else I_k[i, j] <- 0
}
}
I_k
# I_3:
p_s * I_k[3,]
# I_3:
sum(p_s * I_k[3,])
# I_6:
sum(p_s * I_k[6,])
# I_3:
sum(p_s * I_k[3,])
# I_6:
sum(p_s * I_k[6,])
sum(p_s * I_36)
(I_36 <- I_k[3, ] * I_k[6, ])
sum(p_s * I_36)
lambda
lambda^2
lambda[3] * lambda[6] * (1 - ((1-lambda[3]) * (1-lambda[6]) / ((9-1)/9 * (9 - sum(lambda^2)))))
(I_k[3,] - sum(1/84 * I_k[3,]))^2
p_s
p_s * (I_k[3,] - sum(1/84 * I_k[3,]))^2
### delta 3, 3
# definition 20
sum(p_s * (I_k[3,] - sum(1/84 * I_k[3,]))^2)
sum(p_s * (I_k[3,] - sum(p_s * I_k[3,]))^2)
### delta 6, 6
# definition 20
sum(p_s * (I_k[6,] - sum(p_s * I_k[6,]))^2)
### delta 3, 6
# definition 20
sum(p_s * (I_k[3,] - sum(p_s * I_k[3,])) * (I_k[6,] - sum(p_s * I_k[6,])))
lambda[3] * lambda[6] * (1 - ((1-lambda[3]) * (1-lambda[6]) / C))
C <- (9-1)/9 * (9 - sum(lambda^2))
lambda[3] * lambda[6] * (1 - ((1-lambda[3]) * (1-lambda[6]) / C))
sum(p_s * I_36)
# approximation
lambda[3] * (1 - lambda[3])
### delta 3, 3
# definition 20
sum(p_s * (I_k[3,] - sum(p_s * I_k[3,]))^2)
### delta 6, 6
# definition 20
sum(p_s * (I_k[6,] - sum(p_s * I_k[6,]))^2)
# approximation
lambda[6] * (1 - lambda[6])
# approximation
-(lambda[3] * lambda[6] * (1 - lambda[3]) * (1 - lambda[3])) / C
### delta 3, 6
# definition 20
sum(p_s * (I_k[3,] - sum(p_s * I_k[3,])) * (I_k[6,] - sum(p_s * I_k[6,])))
# approximation
-(lambda[3] * lambda[6] * (1 - lambda[3]) * (1 - lambda[3])) / C
read.csv("/Users/tea/Documents/SU Statistik/Sampling and Estimation/lifesavers/Exercise031.csv")
input <- read.csv("/Users/tea/Documents/SU Statistik/Sampling and Estimation/lifesavers/Exercise031.csv")
input$lambda
pareto_pi_ps <- function(lambda) {
N <- 1:length(lambda)
tot_strat <- c()
for (i in 1:N) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, N[i])
}
}
N <- 1:length(N[-tot_strat])
n <- sum(lambda[-tot_strat])
nu <- runif(N)
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, N[order(phi)[1:n]]))
}
samples <- matrix(pareto_pi_ps(input$lambda), nrow = length(input$lambda))
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
N <- 1:length(lambda)
tot_strat <- c()
for (i in 1:N) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, N[i])
}
}
N <- N[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(N)
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, N[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
N <- 1:length(lambda)
tot_strat <- c()
for (i in 1:N) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, N[i])
}
}
N <- N[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(N))
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, N[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
input$lambda
pareto_pi_ps(input$lambda)
samples <- matrix(pareto_pi_ps(input$lambda), nrow = length(input$lambda))
pareto_pi_ps(input$lambda)
pareto_pi_ps(input$lambda)
pareto_pi_ps(input$lambda)
pareto_pi_ps(input$lambda)
pareto_pi_ps(input$lambda)
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
browser()
N <- 1:length(lambda)
tot_strat <- c()
for (i in 1:N) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, N[i])
}
}
N <- N[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(N))
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, N[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
exit
quit
end
pareto_pi_ps <- function(lambda) {
ID <- 1:length(lambda)
tot_strat <- c()
for (i in 1:length(lambda)) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, ID[i])
}
}
ID <- ID[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(ID))
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, ID[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
browser()
ID <- 1:length(lambda)
tot_strat <- c()
for (i in 1:length(lambda)) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, ID[i])
}
}
ID <- ID[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(ID))
phi <- nu/lambda * (1-lambda)/(1-nu)
return(c(tot_strat, ID[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
browser()
ID <- 1:length(lambda)
tot_strat <- c()
for (i in 1:length(lambda)) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, ID[i])
}
}
ID <- ID[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(ID))
phi <- nu/lambda[ID] * (1-lambda[ID])/(1-nu)
return(c(tot_strat, ID[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
pareto_pi_ps <- function(lambda) {
ID <- 1:length(lambda)
tot_strat <- c()
for (i in 1:length(lambda)) {
if (lambda[i] >= 1) {
tot_strat <- c(tot_strat, ID[i])
}
}
ID <- ID[-tot_strat]
n <- sum(lambda[-tot_strat])
nu <- runif(length(ID))
phi <- nu/lambda[ID] * (1-lambda[ID])/(1-nu)
return(c(tot_strat, ID[order(phi)[1:n]]))
}
pareto_pi_ps(input$lambda)
samples <- matrix(pareto_pi_ps(input$lambda), nrow = length(input$lambda))
pareto_pi_ps(input$lambda)
samples <- matrix(pareto_pi_ps(input$lambda), nrow = 15))
samples <- matrix(pareto_pi_ps(input$lambda), nrow = 15)
while (ncol(samples) <= 10000) {
samples <- cbind(samples, pareto_pi_ps(input$lambda))
}
samples
I_12 <- apply(samples, 2, function(x) 12 %in% x)
I_80 <- apply(samples, 2, function(x) 80 %in% x)
I_12_80 <- I_12 * I_80
mean(I_12)
input$lambda[12]
mean(I_12)
input$lambda[12]
mean(I_80)
input$lambda[80]
mean(I_80)
mean(I_12_80)
input$lambda[12] * input$lambda[80] * (1 - (((1-input$lambda[12]) * (1-input$lambda[80])) / C))
mean(I_12_80)
input$lambda[12] * input$lambda[80] * (1 - (((1-input$lambda[12]) * (1-input$lambda[80])) / C))
# delta 12 80
(1/(10000-1)) * sum((I_12 - mean(I_12)) * (I_80 - mean(I_80)))
-(input$lambda[12] * input$lambda[80] * (1 - input$lambda[12]) * (1 - input$lambda[80])) / C
# delta 12 80
(1/(10000-1)) * sum((I_12 - mean(I_12)) * (I_80 - mean(I_80)))
-(input$lambda[12] * input$lambda[80] * (1 - input$lambda[12]) * (1 - input$lambda[80])) / C
# delta 12 80
(1/(10000-1)) * sum((I_12 - mean(I_12)) * (I_80 - mean(I_80)))
-(input$lambda[12] * input$lambda[80] * (1 - input$lambda[12]) * (1 - input$lambda[80])) / C
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files <- list()
temp <- c()
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files <- c(files, list(list(size = as.numeric(gsub("\\D", "", element)),
location = paste(temp, collapse = "/"))))
}
}
directories <- unique(unlist(lapply(files, function(x) x$location)))
sizes <- sapply(directories, function(x){
tot_size <- 0
for (element in files) {
if (x %in% element$location) tot_size <- tot_size + element$size
}
tot_size
})
sum(sizes[sizes <= 100000])
### part 2
tot_size <- sum(sapply(files, function(x) x$size))
sort(sizes)[sort(sizes) >= tot_size - 4e+07][1]
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
s <- readLines("input/07-input.txt")
myloc_name <- function(v){
if(is.null(v)) return(NULL)
sapply(1:length(v), function(q) paste(v[1:q], collapse="_"))
}
myloc <- c()
files <- list()
counter <- 0
for (this in s){
if(this == "$ cd /") myloc <- c()
if(this == "$ cd ..") myloc <- head(myloc, -1)
if(grepl("[$] cd \\w", this)) myloc <- c(myloc, gsub(".+ (.+)$", "\\1", this))
if (grepl("^\\d", this)){
files <- c(files, list(list(name=paste0("f", counter),
size = as.numeric(gsub("\\D", "", this)),
loc = myloc_name(myloc)
)))
}
counter <- counter +1
}
dirs <- lapply(files, function(q) q$loc) |> unlist() |> unique()
sizes <- sapply(dirs, function(x){
all_size <- 0
for (this in files){
if(x %in% this$loc) all_size <- all_size + this$size
}
all_size
})
sizes[sizes <= 100000] |> sum()
View(files)
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files2 <- list()
temp <- c()
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files2 <- c(files2, list(list(size = as.numeric(gsub("\\D", "", element)),
location = paste(temp, collapse = "/"))))
}
}
directories <- unique(unlist(lapply(files2, function(x) x$location)))
sizes <- sapply(directories, function(x){
tot_size <- 0
for (element in files2) {
if (x %in% element$location) tot_size <- tot_size + element$size
}
tot_size
})
sum(sizes[sizes <= 100000])
### part 2
tot_size <- sum(sapply(files2, function(x) x$size))
sort(sizes)[sort(sizes) >= tot_size - 4e+07][1]
View(files2)
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files2 <- list()
temp <- c()
location_names <- function(x) {
if(is.null(x)) return(NULL)
sapply(1:length(x), function(x) paste(x[1:q], collapse = "/"))
}
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files2 <- c(files2, list(list(size = as.numeric(gsub("\\D", "", element)),
location = paste(temp, collapse = "/"))))
}
}
directories <- unique(unlist(lapply(files2, function(x) x$location)))
sizes <- sapply(directories, function(x){
tot_size <- 0
for (element in files2) {
if (x %in% element$location) tot_size <- tot_size + element$size
}
tot_size
})
sum(sizes[sizes <= 100000])
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files2 <- list()
temp <- c()
location_names <- function(x) {
if(is.null(x)) return(NULL)
sapply(1:length(x), function(x) paste(x[1:q], collapse = "/"))
}
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files2 <- c(files2, list(list(size = as.numeric(gsub("\\D", "", element)),
location = location_names(temp))))
}
}
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files2 <- list()
temp <- c()
location_names <- function(x) {
if(is.null(x)) return(NULL)
sapply(1:length(x), function(x) paste(x[1:x], collapse = "/"))
}
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files2 <- c(files2, list(list(size = as.numeric(gsub("\\D", "", element)),
location = location_names(temp))))
}
}
directories <- unique(unlist(lapply(files2, function(x) x$location)))
sizes <- sapply(directories, function(x){
tot_size <- 0
for (element in files2) {
if (x %in% element$location) tot_size <- tot_size + element$size
}
tot_size
})
sum(sizes[sizes <= 100000])
sizes
View(files2)
setwd("/Users/tea/coding/advent-of-code/2022")
##### 07 #####
input <- readLines("input/07-input.txt")
### part 1
files2 <- list()
temp <- c()
location_names <- function(x) {
if(is.null(x)) return(NULL)
sapply(1:length(x), function(y) paste(x[1:y], collapse = "/"))
}
for (element in input) {
if (element == "$ cd ..") temp <- head(temp, -1)
if (grepl("[$] cd \\w", element)) {
temp <- c(temp, strsplit(element, " ")[[1]][3])
}
if (grepl("^\\d", element)) {
files2 <- c(files2, list(list(size = as.numeric(gsub("\\D", "", element)),
location = location_names(temp))))
}
}
directories <- unique(unlist(lapply(files2, function(x) x$location)))
sizes <- sapply(directories, function(x){
tot_size <- 0
for (element in files2) {
if (x %in% element$location) tot_size <- tot_size + element$size
}
tot_size
})
sum(sizes[sizes <= 100000])
### part 2
tot_size <- sum(sapply(files2, function(x) x$size))
sort(sizes)[sort(sizes) >= tot_size - 4e+07][1]
